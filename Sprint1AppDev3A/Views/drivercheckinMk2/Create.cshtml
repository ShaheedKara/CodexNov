@model Sprint1AppDev3A.Models.drivercheckinMk2

@{
    ViewBag.Title = "Create";
   
}

<h2>Create</h2>

<h2>Create</h2>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDp3VflCPmJakef2jt0FpOb1UTTgUHjVp4&callback=initMap"
            type="text/javascript"></script>
</head>
<body onload="init()">
    <title>HTML5 + Geolocalisation + Google Maps API Reverse Geocoding</title>

    <p id="msg">Click the button to get your coordinates:</p>
    <p id="address"></p>

    <button onclick="getLocation()">Where am I ?</button>
    <div id="map_canvas" style="width: 500px; height: 300px"></div>
</body>
</html>
@section scripts{
    <script>
          // p elements for displaying lat / long and address
      var displayCoords, myAddress;

      // used with the google apis
      var geocoder;
      var map;
      var infowindow = new google.maps.InfoWindow();
      var marker;

      // Called when the page is loaded
      function init() {
        displayCoords=document.getElementById("msg");
        myAddress = document.getElementById("address");

        geocoder = new google.maps.Geocoder();

        // In order to show something even before a user clicked on the button
        var latlng = new google.maps.LatLng(34.0144, -6.83);

        var mapOptions = {
          zoom: 8,
          center: latlng,
          mapTypeId: 'roadmap'
        }
        map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
      }

       // Called when the button is clicked
       function getLocation() {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
          } else {
          displayCoords.innerHTML="Geolocation API not supported by your browser.";
       }
     }

    // Called when a position is available
    function showPosition(position) {
        displayCoords.innerHTML="Latitude: " + position.coords.latitude +
            "Longitude: " + position.coords.longitude;
        document.getElementById("testtexts").value = "Latitude: " + position.coords.latitude +
        "Longitude: " + position.coords.longitude;

        // Display the map
        showOnGoogleMap(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));

    }


    function showOnGoogleMap(latlng) {
        // Ask google geocoder for a surface address once we get a longitude and
        // a latitude. In fact the reverse geocoder sends back an array of "guesses"
        // i.e. not only one address object, but several. Each entry in this array
        // has several properties like street, city, etc. We use the "formatted_address"
        // one here, but it might be interesting to get the detailed properties in other
        // applications like a form with street, city, zip code etc.
        geocoder.geocode({'latLng': latlng},reverseGeocoderSuccess);

        function reverseGeocoderSuccess(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            // For debugging
            console.dir(results);

            if (results[1]) {
              map.setZoom(11);
              marker = new google.maps.Marker({
                  position: latlng,
                  map: map
              });
              infowindow.setContent(results[1].formatted_address);
              infowindow.open(map, marker);

              // Display address as text in the page
              myAddress.innerHTML = "Adress: " + results[0].formatted_address;
              document.getElementById("testtext").value = "Adress: " + results[0].formatted_address;




            } else {
              alert('No results found');
            }
          } else {
            alert('Geocoder failed due to: ' + status);
          }
        } // end of reverseGeocoderSuccess

        data = JSON.stringify({
            myAddress: myAddress,
            'myAddress': myAddress,
            'finacharger': 0,
            'destination': "Los Angeles, CA,United states of America"
        });
        $.ajax({
            url: "http://localhost:49704/Home/DemoPanel",
            method: "POST",
            data: data,
            success: function (data) {
                alert(data)
            },
            contentType: 'application/json'
        });
      }  // end of showOnGoogleMap


    </script>

}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>drivercheckinMk2</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.dateandtime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dateandtime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dateandtime, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.lognlat, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.lognlat, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.lognlat, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div>
            Distance:<input id="testtext" type="text" name="testtext" readonly hidden/>
        </div>
        <div>
            Distance:<input id="testtexts" type="text" name="testtexts" readonly hidden />
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

